import Combinatorics.DoubleCounting
import Combinatorics.SimpleGraph.Triangle.Basic
import Data.Nat.Parity
import Data.Sym.Card
import Mathlib.Combinatorics.SimpleGraph.Basic
import Mathlib.Data.Finset.Basic

#align_import mathlib.combinatorics.simple_graph.triangle.basic

/-!

## Main declarations

* `simple_graph.edge_disjoint_triangles`: Predicate for a graph whose triangles are edge-disjoint.
* `simple_graph.locally_linear`: Predicate for each edge in a graph to be in a unique triangle.
-/


open Finset

open Fintype (card)

open Nat

namespace SimpleGraph

variable {Œ± Œ≤ ùïú : Type _} [LinearOrderedField ùïú] {G H : SimpleGraph Œ±} {Œµ Œ¥ : ùïú} {n : ‚Ñï}
  {s : Finset Œ±}

section LocallyLinear

/-- A graph has edge-disjoint triangles if each edge belongs to at most one triangle. -/
def EdgeDisjointTriangles (G : SimpleGraph Œ±) : Prop :=
  (G.cliqueSet 3).Pairwise fun x y => (x ‚à© y : Set Œ±).Subsingleton

/-- A graph is locally linear if each edge belongs to exactly one triangle. -/
def LocallyLinear (G : SimpleGraph Œ±) : Prop :=
  G.EdgeDisjointTriangles ‚àß ‚àÄ ‚¶Éx y‚¶Ñ, G.Adj x y ‚Üí ‚àÉ s, G.IsNClique 3 s ‚àß x ‚àà s ‚àß y ‚àà s

protected theorem LocallyLinear.edgeDisjointTriangles : G.LocallyLinear ‚Üí G.EdgeDisjointTriangles :=
  And.left

theorem EdgeDisjointTriangles.mono (h : G ‚â§ H) (hH : H.EdgeDisjointTriangles) :
    G.EdgeDisjointTriangles :=
  hH.mono <| cliqueSet_mono h

@[simp]
theorem edgeDisjointTriangles_bot : (‚ä• : SimpleGraph Œ±).EdgeDisjointTriangles := by
  simp [edge_disjoint_triangles]

@[simp]
theorem locallyLinear_bot : (‚ä• : SimpleGraph Œ±).LocallyLinear := by simp [locally_linear]

theorem EdgeDisjointTriangles.map (f : Œ± ‚Ü™ Œ≤) (hG : G.EdgeDisjointTriangles) :
    (G.map f).EdgeDisjointTriangles :=
  by
  rw [edge_disjoint_triangles, clique_set_map (by norm_num : 3 ‚â† 1),
    ((Finset.map_injective f).InjOn _).pairwise_image]
  classical
  rintro s hs t ht hst
  dsimp [Function.onFun]
  rw [‚Üê coe_inter, ‚Üê map_inter, coe_map, coe_inter]
  exact (hG hs ht hst).image _

theorem LocallyLinear.map (f : Œ± ‚Ü™ Œ≤) (hG : G.LocallyLinear) : (G.map f).LocallyLinear :=
  by
  refine' ‚ü®hG.1.map _, _‚ü©
  rintro _ _ ‚ü®a, b, h, rfl, rfl‚ü©
  obtain ‚ü®s, hs, ha, hb‚ü© := hG.2 h
  exact ‚ü®s.map f, hs.map, mem_map_of_mem _ ha, mem_map_of_mem _ hb‚ü©

@[simp]
theorem locallyLinear_comap {G : SimpleGraph Œ≤} {e : Œ± ‚âÉ Œ≤} :
    (G.comap e).LocallyLinear ‚Üî G.LocallyLinear :=
  by
  refine' ‚ü®fun h => _, _‚ü©
  ¬∑ rw [‚Üê comap_map_eq e.symm.to_embedding G, comap_symm, map_symm]
    exact h.map _
  ¬∑ rw [‚Üê Equiv.coe_toEmbedding, ‚Üê map_symm]
    exact locally_linear.map _

variable [DecidableEq Œ±]

theorem edgeDisjointTriangles_iff_mem_sym2_subsingleton :
    G.EdgeDisjointTriangles ‚Üî
      ‚àÄ ‚¶Ée : Sym2 Œ±‚¶Ñ, ¬¨e.IsDiag ‚Üí {s ‚àà G.cliqueSet 3 | e ‚àà (s : Finset Œ±).Sym2}.Subsingleton :=
  by
  have :
    ‚àÄ a b,
      a ‚â† b ‚Üí
        {s ‚àà (G.clique_set 3 : Set (Finset Œ±)) | ‚ü¶(a, b)‚üß ‚àà (s : Finset Œ±).Sym2} =
          {s | G.adj a b ‚àß ‚àÉ c, G.adj a c ‚àß G.adj b c ‚àß s = {a, b, c}} :=
    by
    rintro a b hab
    ext s
    simp only [mem_sym2_iff, Sym2.mem_iff, forall_eq_or_imp, forall_eq, Set.sep_and,
      Set.mem_inter_iff, Set.mem_sep_iff, mem_clique_set_iff, Set.mem_setOf_eq,
      and_and_and_comm _ (_ ‚àà _), and_self_iff, is_3_clique_iff]
    constructor
    ¬∑ rintro ‚ü®‚ü®c, d, e, hcd, hce, hde, rfl‚ü©, hab‚ü©
      simp only [mem_insert, mem_singleton] at hab 
      obtain ‚ü®rfl | rfl | rfl, rfl | rfl | rfl‚ü© := hab <;>
            simp_all only [adj_comm, true_and_iff, Ne.def, eq_self_iff_true, not_true] <;>
          first
          | refine' ‚ü®c, _‚ü©
          | refine' ‚ü®d, _‚ü©
          | refine' ‚ü®e, _‚ü© <;>
        simp [*, pair_comm, insert_comm]
    ¬∑ rintro ‚ü®hab, c, hac, hbc, rfl‚ü©
      refine' ‚ü®‚ü®a, b, c, _‚ü©, _‚ü© <;> simp [*]
  constructor
  ¬∑ rw [Sym2.forall]
    rintro hG a b hab
    simp only [Sym2.isDiag_iff_proj_eq] at hab 
    rw [this _ _ (sym2.mk_is_diag_iff.not.2 hab)]
    rintro _ ‚ü®hab, c, hac, hbc, rfl‚ü© _ ‚ü®-, d, had, hbd, rfl‚ü©
    refine' hG.eq _ _ (Set.Nontrivial.not_subsingleton ‚ü®a, _, b, _, hab.ne‚ü©) <;>
      simp [is_3_clique_triple_iff, *]
  ¬∑ simp only [edge_disjoint_triangles, is_3_clique_iff, Set.Pairwise, mem_clique_set_iff, Ne.def,
      forall_exists_index, and_imp, ‚Üê @Set.not_nontrivial_iff _ (_ ‚à© _), not_imp_not,
      Set.Nontrivial, Set.mem_inter_iff, mem_coe]
    rintro hG _ a b c hab hac hbc rfl _ d e f hde hdf hef rfl g hg‚ÇÅ hg‚ÇÇ h hh‚ÇÅ hh‚ÇÇ hgh
    refine' hG (sym2.mk_is_diag_iff.not.2 hgh) _ _ <;> simp [is_3_clique_triple_iff, *]

alias ‚ü®edge_disjoint_triangles.mem_sym2_subsingleton, _‚ü© :=
  edge_disjoint_triangles_iff_mem_sym2_subsingleton

variable [Fintype Œ±] [DecidableRel G.Adj]

instance : Decidable G.EdgeDisjointTriangles :=
  decidable_of_iff ((G.cliqueFinset 3 : Set (Finset Œ±)).Pairwise fun x y => (x ‚à© y).card ‚â§ 1) <| by
    simpa only [coe_clique_finset, edge_disjoint_triangles, Finset.card_le_one, ‚Üê coe_inter]

instance : Decidable G.LocallyLinear :=
  And.decidable

theorem EdgeDisjointTriangles.card_edgeFinset_le (hG : G.EdgeDisjointTriangles) :
    3 * (G.cliqueFinset 3).card ‚â§ G.edgeFinset.card :=
  by
  rw [mul_comm, ‚Üê mul_one G.edge_finset.card]
  refine' card_mul_le_card_mul (fun s e => e ‚àà s.Sym2) _ fun e he => _
  ¬∑ simp only [is_3_clique_iff, mem_clique_finset_iff, mem_sym2_iff, forall_exists_index, and_imp]
    rintro _ a b c hab hac hbc rfl
    have : Finset.card ({‚ü¶(a, b)‚üß, ‚ü¶(a, c)‚üß, ‚ü¶(b, c)‚üß} : Finset <| Sym2 Œ±) = 3 := by
      refine' card_eq_three.2 ‚ü®_, _, _, _, _, _, rfl‚ü© <;> simp [hab.ne, hac.ne, hbc.ne]
    rw [‚Üê this]
    refine' card_mono _
    simp [insert_subset, *]
  ¬∑
    simpa only [card_le_one, mem_bipartite_below, and_imp, Set.Subsingleton, Set.mem_sep_iff,
      mem_clique_finset_iff, mem_clique_set_iff] using
      hG.mem_sym2_subsingleton (G.not_is_diag_of_mem_edge_set <| mem_edge_finset.1 he)

theorem LocallyLinear.card_edgeFinset (hG : G.LocallyLinear) :
    G.edgeFinset.card = 3 * (G.cliqueFinset 3).card :=
  by
  refine' hG.edge_disjoint_triangles.card_edge_finset_le.antisymm' _
  rw [‚Üê mul_comm, ‚Üê mul_one (Finset.card _)]
  refine' card_mul_le_card_mul (fun e s => e ‚àà s.Sym2) _ _
  ¬∑ simpa [Sym2.forall, Nat.succ_le_iff, card_pos, Finset.Nonempty] using hG.2
  simp only [mem_clique_finset_iff, is_3_clique_iff, forall_exists_index, and_imp]
  rintro _ a b c hab hac hbc rfl
  refine' (card_mono _).trans _
  ¬∑ exact {‚ü¶(a, b)‚üß, ‚ü¶(a, c)‚üß, ‚ü¶(b, c)‚üß}
  ¬∑ simp only [subset_iff, Sym2.forall, mem_sym2_iff, le_eq_subset, mem_bipartite_below, mem_insert,
      mem_edge_finset, mem_singleton, and_imp, mem_edge_set, Sym2.mem_iff, forall_eq_or_imp,
      forall_eq, Quotient.eq', Sym2.rel_iff]
    rintro d e hde (rfl | rfl | rfl) (rfl | rfl | rfl) <;> simp_all
  ¬∑
    exact
      (card_insert_le _ _).trans
        (succ_le_succ <| (card_insert_le _ _).trans_eq <| by rw [card_singleton])

end LocallyLinear

variable [Fintype Œ±] [DecidableEq Œ±] [DecidableRel G.Adj] [DecidableRel H.Adj]

@[simp]
theorem farFromTriangleFree_of_nonpos (hŒµ : Œµ ‚â§ 0) : G.FarFromTriangleFree Œµ := fun H _ _ =>
  (mul_nonpos_of_nonpos_of_nonneg hŒµ <| Nat.cast_nonneg _).trans <| Nat.cast_nonneg _

private theorem far_from_triangle_free_of_disjoint_triangles_aux {tris : Finset (Finset Œ±)}
    (htris : tris ‚äÜ G.cliqueFinset 3)
    (pd : (tris : Set (Finset Œ±)).Pairwise fun x y => (x ‚à© y : Set Œ±).Subsingleton) (hHG : H ‚â§ G)
    (hH : H.CliqueFree 3) : tris.card ‚â§ G.edgeFinset.card - H.edgeFinset.card :=
  by
  rw [‚Üê card_sdiff (edge_finset_mono hHG), ‚Üê card_attach]
  by_contra' hG
  have :
    ‚àÄ ‚¶Ét‚¶Ñ, t ‚àà tris ‚Üí ‚àÉ x y, x ‚àà t ‚àß y ‚àà t ‚àß x ‚â† y ‚àß ‚ü¶(x, y)‚üß ‚àà G.edge_finset \ H.edge_finset :=
    by
    intro t ht
    by_contra' h
    refine' hH t _
    simp only [not_and, mem_sdiff, Classical.not_not, mem_edge_finset, mem_edge_set] at h 
    obtain ‚ü®x, y, z, xy, xz, yz, rfl‚ü© := is_3_clique_iff.1 (G.mem_clique_finset_iff.1 <| htris ht)
    rw [is_3_clique_triple_iff]
    refine' ‚ü®h _ _ _ _ xy.ne xy, h _ _ _ _ xz.ne xz, h _ _ _ _ yz.ne yz‚ü© <;> simp
  choose fx fy hfx hfy hfne fmem using this
  let f : { x // x ‚àà tris } ‚Üí Sym2 Œ± := fun t => ‚ü¶(fx t.2, fy t.2)‚üß
  have hf : ‚àÄ x, x ‚àà tris.attach ‚Üí f x ‚àà G.edge_finset \ H.edge_finset := fun x hx => fmem _
  obtain ‚ü®‚ü®t‚ÇÅ, ht‚ÇÅ‚ü©, -, ‚ü®t‚ÇÇ, ht‚ÇÇ‚ü©, -, tne, t : ‚ü¶_‚üß = ‚ü¶_‚üß‚ü© :=
    exists_ne_map_eq_of_card_lt_of_maps_to hG hf
  dsimp at t 
  have i := pd ht‚ÇÅ ht‚ÇÇ (subtype.val_injective.ne tne)
  rw [Sym2.eq_iff] at t 
  cases t
  ¬∑ exact hfne _ (i ‚ü®hfx ht‚ÇÅ, t.1.symm ‚ñ∏ hfx ht‚ÇÇ‚ü© ‚ü®hfy ht‚ÇÅ, t.2.symm ‚ñ∏ hfy ht‚ÇÇ‚ü©)
  ¬∑ exact hfne _ (i ‚ü®hfx ht‚ÇÅ, t.1.symm ‚ñ∏ hfy ht‚ÇÇ‚ü© ‚ü®hfy ht‚ÇÅ, t.2.symm ‚ñ∏ hfx ht‚ÇÇ‚ü©)

/-- If there are `Œµ * (card Œ±)^2` disjoint triangles, then the graph is `Œµ`-far from being
triangle-free. -/
theorem farFromTriangleFree_of_disjoint_triangles (tris : Finset (Finset Œ±))
    (htris : tris ‚äÜ G.cliqueFinset 3)
    (pd : (tris : Set (Finset Œ±)).Pairwise fun x y => (x ‚à© y : Set Œ±).Subsingleton)
    (tris_big : Œµ * (card Œ± ^ 2 : ‚Ñï) ‚â§ tris.card) : G.FarFromTriangleFree Œµ :=
  by
  rw [far_from_triangle_free_iff]
  intro H _ hG hH
  sorry

-- rw ‚Üênat.cast_sub (card_le_of_subset $ edge_finset_mono hG),
-- exact tris_big.trans
--   (nat.cast_le.2 $ far_from_triangle_free_of_disjoint_triangles_aux htris pd hG hH),
protected theorem EdgeDisjointTriangles.farFromTriangleFree (hG : G.EdgeDisjointTriangles)
    (tris_big : Œµ * (card Œ± ^ 2 : ‚Ñï) ‚â§ (G.cliqueFinset 3).card) : G.FarFromTriangleFree Œµ :=
  farFromTriangleFree_of_disjoint_triangles _ Subset.rfl (by simpa using hG) tris_big

variable [Nonempty Œ±]

theorem FarFromTriangleFree.lt_half (hG : G.FarFromTriangleFree Œµ) : Œµ < 2‚Åª¬π :=
  by
  by_contra' hŒµ
  have := hG.le_card_sub_card bot_le (clique_free_bot <| by norm_num)
  simp only [Set.toFinset_card (edge_set ‚ä•), Fintype.card_ofFinset, edge_set_bot, cast_zero,
    Finset.card_empty, tsub_zero] at this 
  have hŒµ‚ÇÄ : 0 < Œµ := hŒµ.trans_lt' (by norm_num)
  rw [inv_pos_le_iff_one_le_mul (zero_lt_two' ùïú)] at hŒµ 
  refine' (this.trans <| le_mul_of_one_le_left (by positivity) hŒµ).not_lt _
  rw [mul_assoc, mul_lt_mul_left hŒµ‚ÇÄ]
  norm_cast
  sorry

-- refine (mul_le_mul_left' (card_mono $ edge_finset_mono le_top) _).trans_lt _,
-- rw [edge_finset_top, filter_not, card_sdiff (subset_univ _), card_univ, sym2.card],
-- simp_rw [sym2.is_diag_iff_mem_range_diag, univ_filter_mem_range, mul_tsub,
--   nat.mul_div_cancel' (card Œ±).even_mul_succ_self.two_dvd],
-- rw [card_image_of_injective _ sym2.diag_injective, card_univ, mul_add_one, two_mul, sq,
--   add_tsub_add_eq_tsub_right],
-- exact tsub_lt_self (mul_pos fintype.card_pos fintype.card_pos) fintype.card_pos,
theorem FarFromTriangleFree.lt_one (hG : G.FarFromTriangleFree Œµ) : Œµ < 1 :=
  hG.lt_half.trans <| by norm_num

end SimpleGraph

